/*** BEGIN file-header ***/
/*
 * Dax - Load and draw SVG
 *
 * Copyright Â© 2009 Intel Corporation.
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms and conditions of the GNU Lesser General Public License,
 * version 2.1, as published by the Free Software Foundation.
 *
 * This program is distributed in the hope it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
 * details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin St - Fifth Floor, Boston, MA 02110-1301 USA
 */

#include "dax-enum-types.h"

const gchar *
dax_enum_to_string (GType type,
                    gint  value)
{
    GEnumClass *enum_class;
    GEnumValue *enum_value;
    const gchar *val;

    enum_class = g_type_class_ref (type);
    enum_value = g_enum_get_value (enum_class, value);
    if (enum_value)
        val = enum_value->value_nick;
    else
        val = "<invalid enum value>";

    g_type_class_unref (enum_class);

    return val;
}

/*** END file-header ***/

/*** BEGIN file-production ***/

/* enumerations from "@filename@" */
#include "@filename@"
/*** END file-production ***/

/*** BEGIN value-header ***/
#ifndef @ENUMNAME@_OVERRIDE_TRANSFORM
static void
transform_@enum_name@_string (const GValue *src,
                              GValue       *dest)
{
    GEnumClass *enum_class;
    GEnumValue *enum_value;

    /* enum_class can't be NULL here as the type had to be initialized to
     * produce the src GValue */
    enum_class = g_type_class_peek (G_VALUE_TYPE (src));
    enum_value = g_enum_get_value (enum_class, g_value_get_enum (src));
    if (enum_value)
        g_value_set_static_string (dest, enum_value->value_nick);
    else
        g_value_set_static_string (dest, "<invalid @EnumName@>");
}

static void
transform_string_@enum_name@ (const GValue *src,
                              GValue       *dest)
{
    GEnumClass *enum_class;
    GEnumValue *enum_value;

#ifdef @ENUMNAME@_CASE_SENSITIVE
    const gchar *nick = g_value_get_string (src);
#else
    gchar *nick = g_ascii_strdown (g_value_get_string (src), -1);
#endif

    /* enum_class can't be NULL here as the type had to be initialized to
     * produce the src GValue */
    enum_class = g_type_class_peek (G_VALUE_TYPE (dest));
    enum_value = g_enum_get_value_by_nick (enum_class, nick);
    if (enum_value)
        g_value_set_enum (dest, enum_value->value);
    else
        g_value_set_enum (dest, @ENUMNAME@_DEFAULT);

#ifndef @ENUMNAME@_CASE_SENSITIVE
    g_free (nick);
#endif
}
#endif /* @ENUMNAME@_OVERRIDE_TRANSFORM */

GType
@enum_name@_get_type (void)
{
  static volatile gsize g_enum_type_id__volatile = 0;

  if (g_once_init_enter (&g_enum_type_id__volatile))
    {
      static const G@Type@Value values[] = {
/*** END value-header ***/

/*** BEGIN value-production ***/
        { @VALUENAME@, "@VALUENAME@", "@valuenick@" },
/*** END value-production ***/

/*** BEGIN value-tail ***/
        { 0, NULL, NULL }
      };
      GType g_enum_type_id;

      g_enum_type_id =
        g_@type@_register_static (g_intern_static_string ("@EnumName@"), values);
#ifndef @ENUMNAME@_OVERRIDE_TRANSFORM
        g_value_register_transform_func (g_enum_type_id, G_TYPE_STRING,
                                         transform_@enum_name@_string);
        g_value_register_transform_func (G_TYPE_STRING, g_enum_type_id,
                                         transform_string_@enum_name@);
#endif

      g_once_init_leave (&g_enum_type_id__volatile, g_enum_type_id);
    }

  return g_enum_type_id__volatile;
}
/*** END value-tail ***/
